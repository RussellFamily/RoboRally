Robo Rally!

This will create a GUI playable version of Robo Rally through python.

####################################################################

Version 1.0 - This will mostly consist of implementation of the base game, without some board elements and without item cards (so that they don't have to all be programmed initially)

#####################################################################

REQUIREMENTS:
The current version of RoboRally requires the following libraries:
sys
random
yaml
pygame
numpy
math

Additional Libraries may be added depending on future functionality

###################################################################

Playing a game:
The current method to start a game is:
1. import RoboRally into python
2. create an instance of the game object (i.e. game=RoboRally.Game()
3. have the game object execute the run_game function (i.e. game.run_game() )
4. ????????
5. Profit!


###################################################################

Overview of Classes:


Game: An object that represents the instance of playing the game: controls rounds, executes moves, executes board elements, and checks for endgame conditions, and owns the board, card deck, and player objects.

Player - A representation of a player in the game.  Will contain objects related to the players robot, hand, and whether the player is declaring a shutdown

Robot - Represents the robot being controlled by a player. Stores information about the robots, including damage, death, shutdown, registers, position, orientation, checkpoints, and image

Deck - An object representing the deck of movement cards dealt out to players, contains cards in a draw and discard pile, and can be shuffled.

Card - An object that details out a move or rotate action a robot takes during a round by putting it into a register, and priority of the move

Register - An object that contains a card object.  Also contains a boolean flag for register lock.

Board - Represents an array of board spaces.  Stores a dictionary of board spaces keyed by a 2-dimensional array tuple, which contains a boardspace object

Board Space - Contains information about the boardspace, including what type of tile it is, as well as presence of walls, lasers, flags and checkpoints


##################################################################

Individual Classes: The following is a breakdown of each class, followed by the definitions of its attributes and functions.
Functions:

Laserfire -(Robot/Board Space) A function that a robot or board element has that fires a laser at all in line of sight

Execute Moves - (Game) Executes all robot moves in the phase

Execute Board Elements - (Game) Executes all board elements, in their respective phase. All elements must have their own function

Execute space Element - (Board Space) Execute action of the space in their correct order.

Test Checkpoints - (Game/Board Space) Check if robots have matched a checkpoint at phase end, and update accordingly

Test Flags - (Game/Board Space) Check if robots have reached a flag at round end.  Check if it is last flag for game end

Apply Damage - (Robot) Robot applies any damage taken to itself, locking appropriate registers and potentially killing itself
